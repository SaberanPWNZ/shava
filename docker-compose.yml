services:
  web:
    build: ./backend
    command: >
      bash -c "
        python wait_for_db.py &&
        echo 'Skipping makemigrations to avoid permission errors...' &&
        echo 'Running migrations...' &&
        python manage.py migrate --noinput &&
        echo 'Migrations applied successfully!' &&
        python manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./backend:/app
      - /app/migrations/
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_started
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
      - DJANGO_DEBUG=True

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  static_volume:
  media_volume:
